import { GoogleGenAI, Type, Modality } from "@google/genai";
import { AnalysisResult } from '../types';

// FIX: Initialize GoogleGenAI with API_KEY from environment variables directly as per guidelines.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64.split(',')[1],
      mimeType,
    },
  };
};

export async function analyzeFaceAndSuggestHairstyles(imageBase64: string): Promise<AnalysisResult> {
    const imagePart = fileToGenerativePart(imageBase64, 'image/jpeg');

    // FIX: Removed redundant JSON instructions from the prompt as responseSchema is used to enforce JSON output.
    const prompt = `Analyze the provided face photo. Focus on face shape, forehead size, jawline, and estimate the hair texture.
    Based on this analysis, do the following:
    1.  Suggest exactly 5 modern and trending hairstyles that would be flattering.
    2.  For each hairstyle, provide a brief explanation of why it suits the facial features.
    3.  For each, recommend a hair length (e.g., short, medium, long).`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-pro',
        contents: { parts: [imagePart, { text: prompt }] },
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    face_shape: { type: Type.STRING },
                    forehead_size: { type: Type.STRING },
                    jawline: { type: Type.STRING },
                    hair_texture: { type: Type.STRING },
                    hairstyles: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                name: { type: Type.STRING },
                                description: { type: Type.STRING },
                                length_recommendation: { type: Type.STRING },
                            },
                            required: ["name", "description", "length_recommendation"]
                        }
                    }
                },
                required: ["face_shape", "forehead_size", "jawline", "hair_texture", "hairstyles"]
            }
        }
    });

    const jsonText = response.text.trim();
    try {
        return JSON.parse(jsonText) as AnalysisResult;
    } catch (e) {
        console.error("Failed to parse JSON response:", jsonText);
        throw new Error("The AI returned an invalid analysis format. Please try again.");
    }
}


export async function inpaintHairstyle(maskedImageBase64: string, hairstylePrompt: string): Promise<string> {
    const imagePart = fileToGenerativePart(maskedImageBase64, 'image/png');
    
    const prompt = `This is a portrait photo where the hair area has been made transparent. Your task is to fill in the transparent area with a new hairstyle.
    
    New Hairstyle: "${hairstylePrompt}"
    
    Instructions:
    - Generate a realistic hairstyle that seamlessly blends with the person's head and face.
    - Maintain the original person's face, features, clothing, and background completely untouched.
    - The new hair should look natural and match the lighting of the original photo.
    - Only generate content within the transparent region.`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [imagePart, { text: prompt }],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:image/png;base64,${base64ImageBytes}`;
        }
    }
    
    throw new Error('No image was generated by the AI. Please try a different hairstyle or photo.');
}